#!/bin/bash
#    Copyright (C) 2015 Joxit
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

set -e
function usage {
  echo "docker-clean [OPTIONS]
    OPTIONS :
        --images
            Delete all images named <none> (use docker rmi for <none> images)
        --images=IMAGE_NAME:IMAGE_TAG
            Delete all images named IMAGE_NAME and their tags or only an image \
with its tag (name and tag must match and regex can be used)
        --containers=IMAGES_NAMES
            Delete all containers for a list of images
        -f, --force
            Append -f in docker options when possible ('docker rmi -f image' \
for example)
        -r, --recursive
            When deleting image, remove also their containers
        -h, --help
            Display a help message, and exit.
        -v, --version
            Display version information, and exit."
  exit 0
}

function get_containers() {
  if [ "$1" = "" ]; then
    return 0
  fi
  IMAGES_DISJUNCTION=`echo ${@} | sed "s/ /|/g"`
  echo "$(docker ps -a | sed 's/  */ /g')" \
    | while read line; do
    if [ $(echo $line \
              | cut -d' ' -f 2 \
              | grep -E ${IMAGES_DISJUNCTION}) ]; then
      echo "$(echo $line | cut -d' ' -f 1)"
    fi
  done
  return 0
}

for arg in "$@"; do
  case "$arg" in
    --images|--images=*)
      opt_images=true
      COMPLET_IMAGE_NAME="${arg#*=}"
      IMAGE_NAME="${COMPLET_IMAGE_NAME%%:*}"
      # Check if COMPLET_IMAGE_NAME contains :
      if [ ${COMPLET_IMAGE_NAME##*:*} ]; then
        IMAGE_TAG="*"
      else
        IMAGE_TAG="${COMPLET_IMAGE_NAME#*:}"
      fi
      if [ "${arg}" = "--images" ] || [ "${IMAGE_NAME}" = "" ]; then
        IMAGE_NAME="<none>"
        none=true
      fi
      ;;
    --containers=*)
      opt_containers=true
      CONTAINERS_IMAGE_NAME="${arg#*=}"
      if [ "${CONTAINERS_IMAGE_NAME}" = "" ]; then
        usage
      fi
      ;;
    -f|--force)
      opt_force=true
      DOCKER_OPTS="${DOCKER_OPTS} -f"
      ;;
    -r|--recursive)
      opt_recursive=true
      ;;
    -h|--help)
      usage
      ;;
    -v|--version)
      echo "$0  Copyright (C) 2015 Joxit"
      echo "This program comes with ABSOLUTELY NO WARRANTY."
      echo "This is free software, and you are welcome to redistribute it"
      echo "under certain condition."
      exit 0
      ;;
  esac
  shift
done
if [ $opt_images ]; then
  if [ $none ]; then
    IMAGES=$(docker images \
                | sed 's/  */ /g' \
                | grep "^$IMAGE_NAME " \
                | cut -d' ' -f 3 \
                | sort \
                | uniq)
  else
    IMAGES=$(docker images \
                | sed 's/  */ /g' \
                | grep "^$IMAGE_NAME $IMAGE_TAG " \
                | cut -d' ' -f 1-2 --output-delimiter=':' \
                | sort \
                | uniq)
  fi
  if [ ${IMAGES} ]; then
    if [ $opt_recursive ]; then
      CONTAINERS=`get_containers $IMAGES`
      if [ ${CONTAINERS} ]; then
        echo "Deleting associated containers first"
        docker rm ${DOCKER_OPTS} ${CONTAINERS}
      fi
    fi
    echo "Deleting ${IMAGE_NAME} images (all tags)"
    docker rmi ${DOCKER_OPTS} ${IMAGES}
  else
    echo "There are no images to delete"
  fi
elif [ $opt_containers ]; then
  echo "Deleting containers of $CONTAINERS_IMAGE_NAME"
  CONTAINERS=`get_containers $CONTAINERS_IMAGE_NAME`
  if [ $CONTAINERS ]; then
    docker rm ${DOCKER_OPTS} ${CONTAINERS}
  else
    echo "There are no containers to delete"
  fi
else
  usage
fi
